<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nginx服务器的安装配置]]></title>
    <url>%2F2019%2F02%2F25%2FNginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Nginx服务器1.阿里云添加80端口阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口 ![打开安全组设置](./img/aliyun0.png) ![](./img/aliyun2.png) ![](./img/aliyun3.png) ![](./img/aliyun4.png) 2. 安装nginxa) 添加nginx存储库 1yum install epel-release b) 安装nginx 1234 yum install nginx``` c) 运行nginx Nginx不会自行启动。要运行Nginx systemctl start nginx 12nginx的运行命令: systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动 12d) 系统启动时启动Nginx systemctl enable nginx 12e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信： sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=https sudo firewall-cmd --reload 123456### 3.nginx目录共享配置 a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting b) 打开 etc/nginx/nginx.conf 文件，设置server #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表 root /home/yuting; location / { autoindex on; autoindex_exact_size on; autoindex_localtime on; } 12除了可以共享文件，还可以自定义页面 #自定义服务器页面 location / { root /home/yuting; index index.html index.htm; } ` 注意： 如果出现权限问题，可以修改目录的权限 ssh密钥认证1.在主机和从机上执行：ssh-keygen 2.在从机上执行: scp id_rsa.pub root@主机地址:~/.ssh/master.pub (上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’) 3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys 4.修改文件authorized_keys的权限: chmod 600 authorized_keys 5.将master.pub放进authorized_keys文件中: cat master.pub &gt;&gt; authorized_keys 6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中]]></content>
      <categories>
        <category>Nginx服务器</category>
        <category>安装配置</category>
        <category>常用操作</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建]]></title>
    <url>%2F2019%2F02%2F25%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Hexo博客搭建 ###1. 搭建博客使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js 首先在自己的电脑上创建一个空的文件夹’Hexo’ 在gitbash中终端中通过cd指令进入到刚才创建的文件夹中 输入指令 npm install -g hexo 安装Hexo 输入指令 hexo init 进行初始化 依次输入指令npm install hexo server 启动服务器 博客内容发生改变后可以通过hexo clean hexo generate hexo deploy hexo server刷新后重新启动 ###2. 部署博客 在github上创建一个空的仓库，仓库名： 用户名.github.io 修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容 使用git部署, 输入指令npm install hexo-deployer-git --save 输入指令hexo clean hexo generate hexo deploy 对博客进行提交]]></content>
      <categories>
        <category>hexo博客</category>
        <category>搭建博客</category>
        <category>基础操作</category>
      </categories>
      <tags>
        <tag>gitbash</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git的常用指令]]></title>
    <url>%2F2019%2F02%2F25%2Fgit%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[git常用指令1.基本指令git init &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 新建git仓库git add 文件/文件夹 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 将文件添加到缓存区中git add -A &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中git stutas &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——— 查看git状态git commit -m ‘提交信息’ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 将缓存区中的内容全部提交到git本地仓库中git log &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——- 查看提交日志git reset - - hard HEAD &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 让工作目录中的内容和仓库中的内容保持一致git reset --hard HEAD^ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到上一个版本git reset - - hard 版本号 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到指定的版本git checkout - - 文件名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)git clone &lt;url&gt; - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)git remote add origin 地址 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次)git push [-u] origin master &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用) 2.分之管理创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发) git branch [-a] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 查看分之git branch 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之git checkout 分支名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 切换分之git checkout -b 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 切换并创建新的分之git diff 分之1 分之2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异git merge 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并 注意: 切换分之、push、pull，这些操作前要保证工作区是clean 怎么避免冲突： 不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量) 3.ssh地址的使用配置全局的用户信息(使用windows自带cmd操作) git global config user.name “yuting” git global config user.email “yuting@163.com” 使用git bash进行操作 git config --global user.name ‘yuting’ git config --global user.email ‘yuting@163.com’]]></content>
      <categories>
        <category>git操作</category>
        <category>指令</category>
        <category>常用操作</category>
      </categories>
      <tags>
        <tag>gitbase</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F25%2FMySQL%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[MySQL配置 下载MySQL源安装包: wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装MySQL源: yum localinstall mysql57-community-release-el7-8.noarch.rpm 安装MySQL: mysql:yum install mysql-community-server 设置开启启动MySQL服务: systemctl enable mysqld 启动/重启MySQL服务：systemctl restart mysqld 查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log 更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法： 方法一：把密码设置复杂点（这是最直接的方法） 方法二：关闭mysql密码强度验证(validate_password) 编辑配置文件：vim /etc/my.cnf， 增加这么一行validate_password=off 编辑后重启mysql服务：systemctl restart mysqld 设置mysql能够远程访问: a. 登录进MySQL: mysql -uroot -p密码 b. 增加一个用户给予访问权限: grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option; c. 刷新权限：flush privileges;­]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux指令]]></title>
    <url>%2F2019%2F02%2F25%2FLinux%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[连接云服务器： 1.连接服务器: ssh root@ip地址 2.退出: logout Linux指令系统： 命令名称 [命名参数] [命令对象] 一、日常操作 1.cd指令 - 进入指定文件夹 cd 目录 - 进入指定目录(也可以是文件夹对应的路径) ~相对路径 — 绝对路径 cd .. - 返回上层目录 cd ~ - 回到根目录 cd / - 进入系统根目录 2.ls指令 ls - 查看当前目录中的内容 ls -l/-lh - 查看详情 ls -a - 隐藏文件也一起显示 ls -R - 递归显示所有内容 ls -S/-t - 按大小/时间排序 3.pwd指令 pwd - 显示当前完整目录 4.文件操作指令 touch 文件名 - 新建文件 cat 文件名 - 查看文件内容 vim/vi 文件名 -打开文件 rm 文件名 - 删除文件 rm - r 目录 - 删除文件夹 cp 文件名1 文件名2 - 将文件1中的内容拷贝到文件2中 cp 文件1路径 文件2路径 cp -r 文件名/目录名 目录2 - 将文件/目录拷贝到目录2中 mv 文件名1 文件名2 - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名） mv 文件1路径 文件2路径 mv 文件名1 文件目录 - 将文件1移动到指定目录中注意: mv指令不能加-r来操作目录 (注意：cp/mv/rm 后面可以跟： -i询问 -f强制 -n不覆盖) mkdir 目录名 - 新建文件夹 mkdir -p a/b/c - 按层级创建a,b,c三个文件夹 mkdir -p a/{b,c}/{d,e,f} -同一层级常见多个 rmdir 目录名 - 删除指定空目录 7.history - 显示历史指令记录 bashrc 配置显示时间：export HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “ 修改bashrc 后使其生效: source ~/.bashrc 或 . .bashrc 6.链接 ln -s 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！) ln 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个硬链接（了解） 注意: 源文件不存在的时候，软件无效，硬链接变成普通文件 8.快捷键 ctr + f - 前进一个字符 ctr + b - 后退一个字符 ctr + a - 回到行首 ctr + e - 回到行尾 ctr + w - 向左删除一个单词 ctr + u - 向左删除全部 ctr + k - 向右删除全部 ctr + y - 粘贴上次删除的内容 ctr + l - 清屏 二、进程相关指令(用得较少) 1.ps指令 ps - 进程状态 ps -aux 或者 ps ex - 查看进程 ps -aux|grep 进程名 - 查看指定进程 ps grep 进程ID 2.top指令 top - 动态监控进程 top -p PID1,PID2,…. - 动态监控指定进程 3.free指令 free -单位 - 以指定单位查看内存, 例如free -m (以Mb为单位显示内存状况), -g, -k等！ 4.kill指令 kill 进程号 - 杀死指定的进程 kill -1/-9/-15 - -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程 pkill 进程名 - 按名字处理进程 killall 进程名 - 处理名字匹配的进程 uptime - 查看系统状态 三、权限管理 1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多) users - 查看当前用户 groups - 查看当前分组 groupadd 分组名 - 添加分组 useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名 - 创建一个用户添加到指定的分组中(在home创建相应的文件夹) usermod -G 分组列表 用户名 - 修改分组 passwd 用户名 - 修改密码 su 用户名 - 切换用户身份 sudo - 以管理员执行其他程序 注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序 b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容 Allow root to run any commands anywhere root ALL=(ALL) ALL xiaoming ALL=(ALL) ALL (自己添加的，xiaoming是用户名) 2.chmod chmod 权限值 文件 - 修改指定文件的权限 chmod [a,u,g,o][+,-][r,w,x] 文件 - 为指定文件，给所有用户添加相应的权限(a:所有，u:自己，g:同组，o:其他；+：添加， -: 取消；r:读，w:写，x:执行) chown 用户名 文件 - 改变文件所有者 (权限制是三组二进制值) self group other rwx rwx rwx 111 101 001 - 自己读写可执行，同一分组的只读可执行，其他的只可执行 110 100 000 chmod 644 文件 chmod 777 文件 chmod 666 文件 三、日志管理 1.cat指令 cat 文件 - 查看文件内容 2.查看部分 head -n N 文件 - 查看前N行内容 tail -n N 文件 - 查看后N行内容 3. less [-N] 文件 按 j 向下 按 k 向上 按 f 向下翻屏 按 b 向上翻屏 按 g 到全文开头 按 G 到全文结尾 按 Q 退出 more [-N] 文件 - 和less差不多，这个是尽可能多，less是尽可能少的加载 4.处理 sort - 排序 (cat 文件 |sort) uniq - 去重 (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用: |sort|uniq awk ‘{print $N}’ - 打印第N列的内容(netstat -natp|awk ‘{print $4}’) history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3 -获取历史指令中，使用最频繁的三个指令 5.重定向 执行获取数据的指令 &gt; 文件 （将执行指定的结果存储到文件中 - 覆盖原文件中内容） 执行获取数据的指令 &gt;&gt; 文件 (将执行指定的结果存储到文件中 - 在原文件的最后追加) 5.统计 wc -c(字符)/-w(单词)/-l(行) 文件 6.查找 grep 查看对象 目录/文件 参数 参数： -i 忽略大小写: grep you bb.txt -i -n 显示行标号： grep you bb.txt -n / grep you bb.txt -i -n -E 通过正则表达式匹配: grep -E ‘正则表达式’ 文件 注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B 支持：. +, *, ?, {N,M}, [], ^, $ -v 忽略字段: grep you bb.txt -v (在bb.txt中找不包含you的所有行) grep -E &apos;[0-9]+\.[0-9]+&apos; abb.txt -v -rn 递归查找目录，并打印行号 grep -r you ./ (在当前文件夹下中所有文件中去找包行’you’的行) —include=‘*.py’ 仅包含 py文件: grep -r you ./ --include=&apos;*.txt&apos; —exclude=‘*.js’ 不包含 js 文件: grep -r you ./ --exclude=&apos;*.c&apos; 例如： grep you bb.txt grep you bb.txt -i grep you bb.txt -i -n grep -E &apos;[0-9]+&apos; bb.txt find DIR -name ‘.xxx’ 找到目录下所有名字匹配的文件: find a1 -name ‘.txt’(在文件夹a1中找所有txt文件) 例：find ./ -size +20k -size -100k -name &apos;*.txt&apos; (找当前目录下大于20k并且小于100k的所有txt文件) which 指令 - 精确查找当前可执行的指令 whereis 指令 - 查找所有匹配的命令 四、网络管理 ifconfig 查看网卡状态 netstat -natp - 查看网络连接状态 netstat -natp|grep 端口号 - 查看指定端口的网络连接状态 ping 地址 ping -i 时间 地址 ping -c 次数 地址 telnet ip地址 端口 - 查看远程主机网络连接状况 dig 地址 - 查看DNS ** wget 地址 - 下载 五、使用包管理工具 包管理工具：yum yum search：搜索软件包，例如yum search nginx。 yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。 yum install：安装软件包，例如yum install nginx。 yum remove：删除软件包，例如yum remove nginx。 yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。 yum check-update：检查有哪些可以更新的软件包。 yum info：显示软件包的相关信息，例如yum info nginx。 源代码构建安装 wget 安装包的路径 -下载安装包 gunzip/tar 压缩包 - 解压、解归档 (设置安装路径) cd 安装包目录 执行: make &amp;&amp; make install -编译安装包程序 给可执行文件添加软连接到usr/bin目录下 -添加快捷方式 压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar]]></content>
      <categories>
        <category>Linux</category>
        <category>指令</category>
        <category>基础操作</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>

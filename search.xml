<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vim编辑器文件操作指令]]></title>
    <url>%2F2019%2F03%2F02%2Fvim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758# vim编辑器之神### 配置vimrc配置在shell中可以通过 `vim ~/.vimrc` 或者 `vim /etc/vimrc` 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：![](./img/vim1.png) ### 常用操作#### 1.模式切换我们可以将vim分为命令模式、编辑模式和末行模式三种 **命令模式：**进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区 (最末什么都没有)**末行模式：**在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作 (最后有一个冒号)**编辑模式：**在命令模式下按&apos;i&apos;进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 --INSERT-- 或者 --插入--) ####2.保存和退出在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面 **w** -- 只保存(类似快捷键ctr+s) **q** -- 退出（在编辑区的内容全部都保存的情况下才有效） **wq** -- 保存并退出 **q!** -- 强制退出（不保存修改信息） ####3.光标操作 以下光标操作都是在命令模式下输入的 **^(shift+6)** -- 移动到行首 **$(shift+4)** -- 移动到行尾 **G(shift+g)** -- 移动到文件末尾**行号G** -- 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行**gg** -- 移动到文件开头 ####4.文本操作 以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入 **dd** -- 删除光标所在的行 **数字dd** -- 从光标所在行开始往后面开始删，删除指定数量行内容 **:%d** -- 删除所有 **yy** -- 复制光标所在的行 **数字yy** -- 从光标所在行开始复制指定行数的内容 **p** -- 将复制的内容粘贴到光标所在的位置 **u** -- 撤销 **ctr+r** -- 反撤销 **:%!sort** -- 对内容排序(将一行内容看出一个字符串然后按照字符串大小进行排序) **：/正则表达式** -- 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找 **:/查找对象[/gice]** -- 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找 注意：正则表达式除了表示次数的符号前需要加\，别的和python是一样的。例如：&apos;&apos;&apos;：/\d\&#123;2&#125; -&gt; 查找两个数字：/a\+ -&gt; 查找a出现一次或者多次&apos;&apos;&apos;**:1,$s/被替换对象/替换内容/参数** -- 将正则表达式匹配到的内容替换成指定内容 - g: 全局匹配 - i: 忽略大小写 - c: 替换时需要提示 - e: 忽略错误]]></content>
      <categories>
        <category>vim编辑</category>
        <category>文件操作命令</category>
      </categories>
      <tags>
        <tag>vim操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库基本操作指令]]></title>
    <url>%2F2019%2F02%2F26%2FMySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400数据库排名：Oracle(关系型) MySQL(关系型) SQLServer(关系型) PostgreSQL(关系型) MongoDB(非关系数据库) DB2(关系型) Redis(非关系数据库) ElasticSearch(非关系数据库) 行（记录）列(字段)关系型数据库：想SQL语句(结构化查询语言) DDL(数据定义语言)： create / drop / alter DML(数据操作语言 - Data Manipulation Language): insert / delete / update / select DCL(数据控制语言): grant / revoke -- 注意: SQL中大小写不敏感（大写和小写是一样的）; 每条SQL语句必须以分号结束-- 一.DDL - 主要提供数据库和表的创建、删除和修改 -- 0. 删除数据库: drop database 数据库名;DROP DATABASE school; -- 直接删除指定数据库DROP DATABASE if EXISTS school; -- 如果指定的数据库存在就删除数据库-- 1.创建数据库: create database 数据库名;create database school; -- 直接创建指定数据库CREATE database if not EXISTS school; -- 当指定数据库不存在的时候才创建数据库create database if not EXISTS school default charset utf8; -- 创建数据库的时候设置字符集编码方式为utf8,让数据库支持中文数据的存储-- 2.使用/切换数据库: use 数据库名;use school;-- 3.新建表: create table if not exists 表名(字段名1 类型1, 字段2 类型2,...);-- 注意： a. 表名一般需要加前缀&apos;t&apos;或者&apos;tb&apos; b.字段用来确定表中要存储哪些数据，字段名随便命名但是不能是关键字 c.数据类型必须是MySQL支持的数据类型-- 常用数据类型: int-整数, char(size)-定长字符串, varchar(size)-不定长字符串, text-字符串, bit-布尔, date-日期CREATE TABLE if not EXISTS t_student(stuid int, stuname varchar(20), gender bit, birth date); -- 新建表并且添加约束: create table if not exists 表名(字段名1 类型1 约束1, 字段2 类型2 约束2,...);-- 常见约束: not null - 不为空, default - 设置默认值, unique - 值唯一, primary key - 主键约束 -- 主键约束: 主键的值可以确定列表中唯一一条记录(通过一个主键值可以找到表中的唯一一条记录)-- 注意: auto_increment只针对主键有效,并且主键的类型是整型;CREATE TABLE if not EXISTS t_student(stuid int not null auto_increment, stuname varchar(20) not null, gender bit DEFAULT 1, birth date,PRIMARY KEY(stuid) -- 将字段stuid作为当前表的主键（设置主键可以间接约束这个字段的值是唯一的）); -- 4.删除表: DROP TABLE if EXISTS 表名;DROP TABLE if EXISTS t_student; -- 清空表中的数据: TRUNCATE TABLE 表名;TRUNCATE TABLE t_student;-- 5.修改表-- 5.1 添加列: alter TABLE 表名 add COLUMN 字段名 字段类型 约束;alter TABLE t_student add COLUMN score FLOAT(8,2) DEFAULT 0;-- 5.2 删除列: alter TABLE 表名 drop COLUMN 字段名;alter TABLE t_student drop COLUMN gender;-- 二、DML(数据操作语言) - 主要针对数据库中数据的增、删、改、查-- 1.增(添加数据/记录)-- 1.1插入数据/记录: insert into 表名 values(值1, 值2, 值3,....) - 依次给指定表中的字段赋值INSERT into t_student VALUES(100, &apos;张三&apos;, 0, &apos;2019-9-23&apos;);-- 1.2插入数据/记录: insert into 表名(字段名1,字段名2,...) values(值1, 值2,...) -以指定的顺序给指定的字段赋值 INSERT into t_student(stuname, birth) VALUES(&quot;小花&quot;, date(now())); -- 一次插入一条记录-- 一次插入多条记录INSERT into t_student(stuname, birth) VALUES(&quot;小花&quot;, date(now())),(&apos;小明&apos;, &apos;2018-9-8&apos;),(&apos;路飞&apos;, &apos;1999-12-16&apos;),(&apos;佐助&apos;, &apos;2000-10-12&apos;);-- 值的问题: sql中是数字对应的值直接写，字符串需要使用引号引起来，bit类型的值只有0或者1, 时间可以用内容是满足时间格式字符串也可以是通过时间函数获取的值-- 时间函数: now() - 当前时间 date(now()) - 当前日期 year(now()) - 当前年 month(now()) - 当前月 .... -- 2.删（删除数据/记录） -- delete from 表名; - 删除指定表中所有记录DELETE FROM t_student;-- delete from 表名 where 条件语句; - 删除满足条件的记录 -- SQL中的条件语句: =(判断是否相等), &lt;&gt;(不等于,和python中的!=功能一样), &gt;, &lt;, &gt;=, &lt;=DELETE FROM t_student WHERE stuid=100; -- 删除t_student表中stuid的值等于100的记录 DELETE FROM t_student WHERE stuname=&apos;小花&apos;; -- 删除t_student表中stuname的值等于&apos;小花&apos;的记录DELETE FROM t_student WHERE stuid&lt;108; -- 删除t_student表中stuid的值小于&apos;小花&apos;的记录 -- 3.改(修改数据/记录) -- update 表名 set 字段1=新值1, 字段2=新值2,...; - 将指定表中所有行的指定列/字段的值赋值为新值UPDATE t_student set birth=&apos;1999-10-1&apos;, gender=1;-- update 表名 set 字段1=新值1, 字段2=新值2,... where 条件语句; -将表中满足条件的行中指定字段的值赋值为新值 UPDATE t_student set gender=0 WHERE stuname=&apos;小花&apos;;-- 通配符%: 表示任意个数的任意字符（包括0个）UPDATE t_student set birth=&apos;2000-01-01&apos; WHERE stuname LIKE &apos;小%&apos;; -- 修改stuname是以&apos;小&apos;开头的行对应的birth的值UPDATE t_student set birth=&apos;2111-01-01&apos; WHERE stuname LIKE &apos;%小%&apos;; -- 统配符_: 表示一个任意字符UPDATE t_student set birth=&apos;2444-01-01&apos; WHERE stuname LIKE &apos;小_&apos;; -- 修改stuname只有两个字符，并且第一个字符是‘小’对应的行的birth的值-- 注意: 通配符只针对字符串有效! -- 4.查(获取数据)-- 4.1直接查询-- select * from 表名; - 获取指定表中所有行和所有的列(所有数据)SELECT * FROM t_student;-- select 字段名1,字段名2,... from 表名; - 获取指定表中所有行指定的列 SELECT stuname,stuid FROM t_student; -- select * from 表名 where 条件; - 获取指定表中所有满足条件的行所有列的数据 SELECT * FROM t_student WHERE stuid&gt;115; -- 4.2列重命名-- select 字段1 as 新字段1, 字段2 as 新字段2,... from 表名;-- 注意： 这儿的as可以省略SELECT stuid as &apos;学号&apos;, stuname, gender as &apos;性别&apos; FROM t_student; -- 对查询结果中的stuid和gender字段进行重命名-- 4.3对查询结果重新赋值(一般针对布尔数据)-- select if(字段名,值1,值2) from 表名; -查询指定字段，并且判断字段对应的值是0还是1，如果是1结果为值1，否则为值2-- 注意: 这儿的if的用法是MySQL专有的-- MySQL写法: if(字段, 新值1, 新值2)SELECT stuname,if(gender,&apos;男&apos;,&apos;女&apos;) as &apos;性别&apos; FROM t_student; -- 通用写法: case 字段 when 值 then 新值1 else 新值2 endSELECT case gender WHEN 1 THEN &apos;男&apos; ELSE &apos;女&apos; END as &apos;性别&apos; FROM t_student;-- 4.4对列进行合并-- select concat(字段1,字段2,...) from 表名;SELECT CONCAT(stuname,stuid) as &apos;name_id&apos; FROM t_student;SELECT CONCAT(stuname,&apos;:&apos;,stuid) as &apos;name_id&apos; FROM t_student;-- 注意: 数字和字符串数据可以合并，bit类型的数据不可以合并-- SELECT CONCAT(stuname,&apos;:&apos;,gender) as &apos;name_id&apos; FROM t_student; -- 4.5模糊查询 - 查询的时候时候通过like条件来指定查询对象-- sql中支持逻辑运算符and(逻辑与运算)和or(逻辑或运算)，not(逻辑非)SELECT * FROM t_student WHERE stuname like &apos;%飞%&apos; or not stuid &lt; 110; -- 4.6排序(先按之前的任何语法进行查询在排序)-- select * from 表名 order by 字段; - 对查询结果按照指定字段的值进行升序排序 -- select * from 表名 order by 字段 asc; - 对查询结果按照指定字段的值进行升序排序 -- select * from 表名 order by 字段 desc; - 对查询结果按照指定字段的值进行降序排序SELECT * FROM t_student ORDER BY gender; -- 按性别升序排序SELECT * FROM t_student ORDER BY stuid ASC; -- 按学号升序排序SELECT * FROM t_student ORDER BY stuid DESC; -- 按学号降序排序-- 排序的时候可以通过在order by的后边加多个字段，进行联排。排序的时候前面的字段的优先级高些SELECT * FROM t_student ORDER BY gender ASC, stuid DESC; -- 先按性别进行升序排序，然后再按学号降序排序。 -- 4.7限制 -- select * from 表名 limit N; -- 获取查询结果的前N条记录SELECT * FROM t_student LIMIT 3; -- 获取查询结果的前3条记录-- select * from 表名 limit M offset N; -- 对查询结果跳过前N条数据，取M条数据出来 SELECT * FROM t_student LIMIT 3 offset 4; -- 跳过前4数据，然后取3条数据-- =================================sql基础补充===============================-- 1.条件语句的写法-- 在SQL中可以通过 `where 条件语句`来对操作对象进行筛选 - 筛选 -- a. 比较运算符： =, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;=-- 注意: 判断一个字段的值是否为空不用使用=和&lt;&gt;, 而是使用`is null` 和 `is not null`SELECT addr FROM t_student;SELECT stuname FROM t_student WHERE addr is NULL; -- 判断是否为NULL（空）SELECT stuname FROM t_student WHERE addr=&apos;&apos;; -- 判断是否是空串-- b. 逻辑运算符: and, or, not -- c. where 字段名 between 值1 and 值2 -- 筛选指定的字段的值在值1和值2之间SELECT stuname,birth FROM t_student WHERE birth BETWEEN &apos;1990-1-1&apos; AND &apos;1999-12-31&apos;; -- d. where 字段名 in 集合 -- 筛选出字段值是集合中的元素;(集合是使用括号括起来里面多个值)SELECT * FROM t_student WHERE stuname in (&apos;小花&apos;, &apos;小明&apos;, &apos;路飞&apos;); -- e. like操作 -- 2.数据类型 -- varchar(size): 不定长字符串，size决定的是最大长度-- char(size): 定长字符 -- text: 不限长度(最大是255个字符)-- int/tinyint(-128~127)-- FLOAT(size,d)/DOUBLE(size,d) - 这儿的size和d的值都有约束效果-- bit: 只有0和1两个值-- date/datetime/time: 值可以是时间函数的结果，也可以时间字符串；计算或者是比较的时候内部是按时间处理的UPDATE t_student SET tel=&apos;1367819230&apos;;ALTER TABLE t_student ADD COLUMN intro VARCHAR(10);SELECT * FROM t_student; -- 3.去重 SELECT DISTINCT addr FROM t_student; -- ========================添加约束=========================-- 1.创建表的时候添加约束CREATE TABLE if not EXISTS t_college(collid int, collname VARCHAR(20) NOT NULL, -- 创建表的时候添加约束website VARCHAR(1024), intro VARCHAR(200),PRIMARY KEY(collid));-- 2.通过添加约束索引的方式添加约束 -- a.添加约束-- alter table 表名 add constraint 索引名 约束 (字段名);-- 说明: 索引名 - 自己随便命名，用来指向当前添加的约束； 约束 - 需要添加的约束(支持唯一约束、主键约束和外键约束)ALTER TABLE t_college ADD CONSTRAINT con_website UNIQUE (website); -- 给t_college表中的website添加unique约束，约束索引为con_website-- b.删除约束-- alter table 表名 drop index 约束索引;ALTER TABLE t_college DROP index con_website;-- ====================外键和E.R图================-- 1.什么是外键：表中的某个字段的值是根据其他表中主键的值来确定的。那么这个字段就是外键 -- 1.1 多对一的外键的添加： 将外键添加到多的一方对应的表中 -- 一对一的外键的添加： 将外键随便添加到哪一方，同时添加值唯一约束 -- 多对多的外键的添加： 关系型数据库中，两张表没法实现多多的关系，需要一个中间表。(中间表有两个外键分别参照多多的两个表的主键)-- 1.2 怎么添加外键： -- a.添加外键对应的字段 alter TABLE tb_student add COLUMN collid int;-- b.给设计好的外键对应的字段添加外键约束-- alter table 表1 add constraint 索引名 foreign key (字段1) references 表2 (字段2); -- - 将表1中的字段1设置为外键，并且让这个外键的值参照表2中的字段2ALTER TABLE tb_student ADD CONSTRAINT fk_collid_stu FOREIGN KEY (collid) REFERENCES tb_college (collid);-- c. 删除外键约束 -- alter table 表名 drop foreign key 外键索引名; - 可以删除外键约束，但是外键索引还存在；需要额外的把索引删掉-- 注意: 删除外键约束的时候直接删除约束的索引无效，必须先将约束删掉，然后再删除索引.ALTER TABLE tb_student DROP FOREIGN KEY fk_collid_stu;ALTER TABLE tb_student DROP INDEX fk_collid_stu; -- d. 多对多的外键约束-- 添加学生的外键约束 ALTER TABLE tb_score ADD CONSTRAINT fk_stuid_score FOREIGN KEY (stuid) REFERENCES tb_student (stuid);-- 添加课程的外键约束ALTER TABLE tb_score ADD CONSTRAINT fk_couid_score FOREIGN KEY (couid) REFERENCES tb_course (couid);-- ==================查询的高级操作================= -- 1.聚合：max()/min()/sum()/avg()/count()-- SELECT 聚合函数(字段) FROM 表名WHERE 条件; -- 按条件多表查询指定字段数据，然后将查询结果做相应的聚合运算。聚合运算的结果是最后结果 SELECT mark FROM tb_score; -- 获取tb_score表中的所有分数值SELECT max(mark) as maxmark FROM tb_score; -- 获取tb_score表中所有分数的最大值SELECT min(mark) FROM tb_score; SELECT sum(mark) FROM tb_score; SELECT avg(mark) FROM tb_score WHERE scoreid&gt;=123; -- 计算平均值的时候如果参与运算的对象的值为NULL,那么这个数据不会参与计算SELECT count(mark) FROM tb_score WHERE mark&gt;=90;-- 2.分组 -- SELECT 字段操作 FROM 表名 WHERE 条件 GROUP BY(字段2); -- 将指定表中满足条件的记录按照字段2的进行分组(值是一样的在一个组里面), 然后再讲每个分组作为整体按照指定字段进行指定聚合操作-- 求每个学生的平均成绩SELECT stuid,avg(mark) FROM tb_score WHERE scoreid &lt;= 115 GROUP BY(stuid) ;-- 注意:a.字段操作的位置除了分组字段不用聚合，其他字段都必须聚合 b.分组的时候where要放到分组前对需要分组的数据进行筛选-- having: 分组的时候，在分组后用having代替where来对分组后的数据进行筛选-- 获取平均分数大于60分的学生的idSELECT stuid,avg(mark) FROM tb_score GROUP BY(stuid) HAVING avg(mark)&gt;60;-- 3.子查询: 将一个查询操作的结果作为另外一个查询的数据源-- 在tb_score表中获取成绩是大于90分的学生的idSELECT stuid FROM tb_score WHERE mark&gt;90 and stuid is not NULL; -- 获取成绩大于90分的学生的名字SELECT stuname FROM tb_student WHERE stuid in (SELECT stuid FROM tb_score WHERE mark&gt;90 and stuid is not NULL); SELECT stuid,mark FROM tb_score WHERE mark &gt; 90 and stuid is not NULL;-- 将一个查询的结果作为查询对象提供给另外一个查询。但是第一个查询结果需要重命名SELECT mark FROM (SELECT stuid,mark FROM tb_score WHERE mark &gt; 90 and stuid is not NULL) as t2;-- ========================连接查询===============================-- 1.连接查询：同时查询多个表中的数据-- select * from 表名1,表名2... where 连接条件;-- 连接查询如果不加连接条件，结果是笛卡尔积：(a,b,c)(1,2,3)——&gt;(a1,a2,a3,b1,b2,b3,c1,c2,c3)-- 获取老师姓名和其对应的学院名select teaname,collname from tb_college,tb_teaher where tb_college.collid=tb_student.collid;-- 获取学生姓名和其指定课程的分数select stuname,couname,mark from tb_student,tb_course,tb_score where tb_student.stuid=tb_score.stuid and tb_course.couid=tb_score.couid;-- 注意：如果连接查询的时候既有连接条件又有筛选条件，我们要把筛选条件写在连接条件后面-- 查询平均成绩大于80分的学生姓名对应的学生的平均成绩select stuname,avg_mark from tb_student,(select stuid,avg(mark) as avg_mark from tb_score group by(stuid)) as temp_t where tb_student.stuid = temp_t.stuid and avg_mark&gt;80;-- 2.内连接-- select * from 表1 inner join 表2 on 表2的连接条件 inner join 表3 on 表3的连接条件 ...;-- 注意：中间表写在最前面（存在关联其他表外键的表）-- 查询学生姓名对应的学科名的分数select stuname,couname,mark from tb_score inner join tb_student on tb_student.stuid=tb_score.stuid inner join tb_course on tb_course.couid=tb_score.couid where mark&lt;60;-- 内连接把满足条件的记录取出来-- 3.外连接-- 外连接分为左外连接、右外连接和全连接，但是在mysql中只支持左外连接和右外连接-- 表1(左表) left/right/inner jion 表2(右表)-- 左外连接：将左表中所有对应字段的所有数据取出，然后再查出对应的右表中对应字段的值，如果右表对应的值不存在结果为null-- 右外连接：将右表中所有对应字段的所有数据取出，然后再查出对应的左表中对应字段的值，如果左表对应的值不存在结果为null-- 查所有学生名对应的成绩select stuname,mark from tb_score inner join tb_student on tb_student.stuid=tb_score.stuid;select stuname,mark from tb_score left join tb_student on tb_student.stuid=tb_score.stuid;-- ========================字段索引==============================-- explain: 获取执行-- 字段的索引就相当于目录，作用是为了能够快速的对这个字段进行查找-- 添加索引的好处是可以大大的提高查询效率； 缺点：1.会消耗额外的存储空间 2.会让添加和删除的效率降低。-- 建议：1. 索引不能滥用 2.如果项目中针对某个字段的查询很频繁，建议加个对应的索引explain select * from tb_student where stuid=1;explain select * from tb_student where stuname=&apos;张三&apos;;-- 添加索引-- create index 索引名称 on 表名 (字段名); - 给指定表中的指定字段添加索引create index index_stuname on tb_student (stuname); -- 给名字加索引create index index_stuname1 on tb_student (stuname(1)); -- 按姓加索引-- 删除索引alter table tb_student drop index index_stuname;-- =========================DCL========================-- 1.创建用户-- create user 用户名@登录地址-- 登录地址: (限制用户能够登录mysql的主机地址)，ip地址(指定地址)，localhost(数据库本机)，%(任何位置)create user &apos;zhangsan&apos;@&apos;%&apos; identified by &apos;aaaaaa&apos;; -- 删除用户: drop user 用户名;drop user 用户名;-- 2.授权-- grant 权限类型 on 数据库.对象 to 用户名;grant select on *.* to &apos;zhangshan&apos;;grant update on *.* to &apos;zhangshan&apos;;grant all privileges on *.* to &apos;zhangshan&apos;; -- 添加所有权限grant all privileges on *.* to &apos;zhangshan&apos; with grant option; -- 添加所有权限，并且能够将自己的权限再授权给其他用户-- 3.召回授权-- revoke 权限类型 on 数据库.对象 from 用户名;revoke delete on school.* from &apos;zhangshan&apos;;-- 4.事务-- 完成一个任务需要执行多条sql，但是要求这多个操作当中只要有一个操作失败，整个任务就失败，数据全部还原，所有的操作都成功整个任务才成功的时候就使用事务。-- 开启事务环境begin;update tb_student set stuname = &apos;一一&apos; where stuname=&apos;12&apos;;delete from tb_student where stuid=110;-- 提交事务(只有begin到commit之间的所有的sql都执行成功，才会执行commit；否则执行rollback)commit;-- 事务回滚(放弃begin到commit之间执行成功的所有sql语句的结果)rollback;-- 8.pyMySQL1.建立连接 host - 要连接的数据库所在的主机地址(远程连接用ip地址，本机使用&apos;localhost&apos;) user - 用户名 password - 密码 database - 数据库 port - 端口 charset - 编码方式 con_obj = pymysql.connect(host=&apos;47.101.0.09&apos;, user=&apos;root&apos;, password=&apos;aaaaa&apos;, database=&apos;school&apos;, port=3306, charset=&apos;utf8&apos;, autocommit=True ) print(con_obj) 2.获得游标对象 - 提供数据库操作的上下文 注意：游标提供的上下文是事务环境 with con_obj.cursor() as cursor: 在这后面操作数据库 3.操作数据库，执行sql语句：连接对象.execute(sql语句) 返回执行结果，如果是增删改操作，结果是否成功：1-成功，0-失败 result = cursor.execute(&quot;update tb_teacher set teaage=25;&quot;) print(result) 事务提交 con_obj.commit() 关闭连接：连接对象.close() con_obj.close()]]></content>
      <categories>
        <category>MySQL数据库</category>
        <category>基本操作指令</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx服务器的安装配置]]></title>
    <url>%2F2019%2F02%2F25%2FNginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Nginx服务器1.阿里云添加80端口阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口 ![打开安全组设置](./img/aliyun0.png) ![](./img/aliyun2.png) ![](./img/aliyun3.png) ![](./img/aliyun4.png) 2. 安装nginxa) 添加nginx存储库 1yum install epel-release b) 安装nginx 1234 yum install nginx``` c) 运行nginx Nginx不会自行启动。要运行Nginx systemctl start nginx 12nginx的运行命令: systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动 12d) 系统启动时启动Nginx systemctl enable nginx 12e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信： sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=https sudo firewall-cmd --reload 123456### 3.nginx目录共享配置 a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting b) 打开 etc/nginx/nginx.conf 文件，设置server #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表 root /home/yuting; location / { autoindex on; autoindex_exact_size on; autoindex_localtime on; } 12除了可以共享文件，还可以自定义页面 #自定义服务器页面 location / { root /home/yuting; index index.html index.htm; } ` 注意： 如果出现权限问题，可以修改目录的权限 ssh密钥认证1.在主机和从机上执行：ssh-keygen 2.在从机上执行: scp id_rsa.pub root@主机地址:~/.ssh/master.pub (上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’) 3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys 4.修改文件authorized_keys的权限: chmod 600 authorized_keys 5.将master.pub放进authorized_keys文件中: cat master.pub &gt;&gt; authorized_keys 6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中]]></content>
      <categories>
        <category>Nginx服务器</category>
        <category>安装配置</category>
        <category>常用操作</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建]]></title>
    <url>%2F2019%2F02%2F25%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Hexo博客搭建 ###1. 搭建博客使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js 首先在自己的电脑上创建一个空的文件夹’Hexo’ 在gitbash中终端中通过cd指令进入到刚才创建的文件夹中 输入指令 npm install -g hexo 安装Hexo 输入指令 hexo init 进行初始化 依次输入指令npm install hexo server 启动服务器 博客内容发生改变后可以通过hexo clean hexo generate hexo deploy hexo server刷新后重新启动 ###2. 部署博客 在github上创建一个空的仓库，仓库名： 用户名.github.io 修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容 使用git部署, 输入指令npm install hexo-deployer-git --save 输入指令hexo clean hexo generate hexo deploy 对博客进行提交]]></content>
      <categories>
        <category>hexo博客</category>
        <category>搭建博客</category>
        <category>基础操作</category>
      </categories>
      <tags>
        <tag>gitbash</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git的常用指令]]></title>
    <url>%2F2019%2F02%2F25%2Fgit%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[git常用指令1.基本指令git init &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 新建git仓库git add 文件/文件夹 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 将文件添加到缓存区中git add -A &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中git stutas &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——— 查看git状态git commit -m ‘提交信息’ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 将缓存区中的内容全部提交到git本地仓库中git log &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——- 查看提交日志git reset - - hard HEAD &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 让工作目录中的内容和仓库中的内容保持一致git reset --hard HEAD^ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到上一个版本git reset - - hard 版本号 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到指定的版本git checkout - - 文件名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)git clone &lt;url&gt; - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)git remote add origin 地址 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次)git push [-u] origin master &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用) 2.分之管理创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发) git branch [-a] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 查看分之git branch 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之git checkout 分支名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 切换分之git checkout -b 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 切换并创建新的分之git diff 分之1 分之2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异git merge 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并 注意: 切换分之、push、pull，这些操作前要保证工作区是clean 怎么避免冲突： 不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量) 3.ssh地址的使用配置全局的用户信息(使用windows自带cmd操作) git global config user.name “yuting” git global config user.email “yuting@163.com” 使用git bash进行操作 git config --global user.name ‘yuting’ git config --global user.email ‘yuting@163.com’]]></content>
      <categories>
        <category>git操作</category>
        <category>指令</category>
        <category>常用操作</category>
      </categories>
      <tags>
        <tag>gitbase</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F25%2FMySQL%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[MySQL配置 下载MySQL源安装包: wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装MySQL源: yum localinstall mysql57-community-release-el7-8.noarch.rpm 安装MySQL: mysql:yum install mysql-community-server 设置开启启动MySQL服务: systemctl enable mysqld 启动/重启MySQL服务：systemctl restart mysqld 查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log 更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法： 方法一：把密码设置复杂点（这是最直接的方法） 方法二：关闭mysql密码强度验证(validate_password) 编辑配置文件：vim /etc/my.cnf， 增加这么一行validate_password=off 编辑后重启mysql服务：systemctl restart mysqld 设置mysql能够远程访问: a. 登录进MySQL: mysql -uroot -p密码 b. 增加一个用户给予访问权限: grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option; c. 刷新权限：flush privileges;­]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux指令]]></title>
    <url>%2F2019%2F02%2F25%2FLinux%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[连接云服务器： 1.连接服务器: ssh root@ip地址 2.退出: logout Linux指令系统： 命令名称 [命名参数] [命令对象] 一、日常操作 1.cd指令 - 进入指定文件夹 cd 目录 - 进入指定目录(也可以是文件夹对应的路径) ~相对路径 — 绝对路径 cd .. - 返回上层目录 cd ~ - 回到根目录 cd / - 进入系统根目录 2.ls指令 ls - 查看当前目录中的内容 ls -l/-lh - 查看详情 ls -a - 隐藏文件也一起显示 ls -R - 递归显示所有内容 ls -S/-t - 按大小/时间排序 3.pwd指令 pwd - 显示当前完整目录 4.文件操作指令 touch 文件名 - 新建文件 cat 文件名 - 查看文件内容 vim/vi 文件名 -打开文件 rm 文件名 - 删除文件 rm - r 目录 - 删除文件夹 cp 文件名1 文件名2 - 将文件1中的内容拷贝到文件2中 cp 文件1路径 文件2路径 cp -r 文件名/目录名 目录2 - 将文件/目录拷贝到目录2中 mv 文件名1 文件名2 - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名） mv 文件1路径 文件2路径 mv 文件名1 文件目录 - 将文件1移动到指定目录中注意: mv指令不能加-r来操作目录 (注意：cp/mv/rm 后面可以跟： -i询问 -f强制 -n不覆盖) mkdir 目录名 - 新建文件夹 mkdir -p a/b/c - 按层级创建a,b,c三个文件夹 mkdir -p a/{b,c}/{d,e,f} -同一层级常见多个 rmdir 目录名 - 删除指定空目录 7.history - 显示历史指令记录 bashrc 配置显示时间：export HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “ 修改bashrc 后使其生效: source ~/.bashrc 或 . .bashrc 6.链接 ln -s 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！) ln 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个硬链接（了解） 注意: 源文件不存在的时候，软件无效，硬链接变成普通文件 8.快捷键 ctr + f - 前进一个字符 ctr + b - 后退一个字符 ctr + a - 回到行首 ctr + e - 回到行尾 ctr + w - 向左删除一个单词 ctr + u - 向左删除全部 ctr + k - 向右删除全部 ctr + y - 粘贴上次删除的内容 ctr + l - 清屏 二、进程相关指令(用得较少) 1.ps指令 ps - 进程状态 ps -aux 或者 ps ex - 查看进程 ps -aux|grep 进程名 - 查看指定进程 ps grep 进程ID 2.top指令 top - 动态监控进程 top -p PID1,PID2,…. - 动态监控指定进程 3.free指令 free -单位 - 以指定单位查看内存, 例如free -m (以Mb为单位显示内存状况), -g, -k等！ 4.kill指令 kill 进程号 - 杀死指定的进程 kill -1/-9/-15 - -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程 pkill 进程名 - 按名字处理进程 killall 进程名 - 处理名字匹配的进程 uptime - 查看系统状态 三、权限管理 1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多) users - 查看当前用户 groups - 查看当前分组 groupadd 分组名 - 添加分组 useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名 - 创建一个用户添加到指定的分组中(在home创建相应的文件夹) usermod -G 分组列表 用户名 - 修改分组 passwd 用户名 - 修改密码 su 用户名 - 切换用户身份 sudo - 以管理员执行其他程序 注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序 b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容 Allow root to run any commands anywhere root ALL=(ALL) ALL xiaoming ALL=(ALL) ALL (自己添加的，xiaoming是用户名) 2.chmod chmod 权限值 文件 - 修改指定文件的权限 chmod [a,u,g,o][+,-][r,w,x] 文件 - 为指定文件，给所有用户添加相应的权限(a:所有，u:自己，g:同组，o:其他；+：添加， -: 取消；r:读，w:写，x:执行) chown 用户名 文件 - 改变文件所有者 (权限制是三组二进制值) self group other rwx rwx rwx 111 101 001 - 自己读写可执行，同一分组的只读可执行，其他的只可执行 110 100 000 chmod 644 文件 chmod 777 文件 chmod 666 文件 三、日志管理 1.cat指令 cat 文件 - 查看文件内容 2.查看部分 head -n N 文件 - 查看前N行内容 tail -n N 文件 - 查看后N行内容 3. less [-N] 文件 按 j 向下 按 k 向上 按 f 向下翻屏 按 b 向上翻屏 按 g 到全文开头 按 G 到全文结尾 按 Q 退出 more [-N] 文件 - 和less差不多，这个是尽可能多，less是尽可能少的加载 4.处理 sort - 排序 (cat 文件 |sort) uniq - 去重 (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用: |sort|uniq awk ‘{print $N}’ - 打印第N列的内容(netstat -natp|awk ‘{print $4}’) history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3 -获取历史指令中，使用最频繁的三个指令 5.重定向 执行获取数据的指令 &gt; 文件 （将执行指定的结果存储到文件中 - 覆盖原文件中内容） 执行获取数据的指令 &gt;&gt; 文件 (将执行指定的结果存储到文件中 - 在原文件的最后追加) 5.统计 wc -c(字符)/-w(单词)/-l(行) 文件 6.查找 grep 查看对象 目录/文件 参数 参数： -i 忽略大小写: grep you bb.txt -i -n 显示行标号： grep you bb.txt -n / grep you bb.txt -i -n -E 通过正则表达式匹配: grep -E ‘正则表达式’ 文件 注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B 支持：. +, *, ?, {N,M}, [], ^, $ -v 忽略字段: grep you bb.txt -v (在bb.txt中找不包含you的所有行) grep -E &apos;[0-9]+\.[0-9]+&apos; abb.txt -v -rn 递归查找目录，并打印行号 grep -r you ./ (在当前文件夹下中所有文件中去找包行’you’的行) —include=‘*.py’ 仅包含 py文件: grep -r you ./ --include=&apos;*.txt&apos; —exclude=‘*.js’ 不包含 js 文件: grep -r you ./ --exclude=&apos;*.c&apos; 例如： grep you bb.txt grep you bb.txt -i grep you bb.txt -i -n grep -E &apos;[0-9]+&apos; bb.txt find DIR -name ‘.xxx’ 找到目录下所有名字匹配的文件: find a1 -name ‘.txt’(在文件夹a1中找所有txt文件) 例：find ./ -size +20k -size -100k -name &apos;*.txt&apos; (找当前目录下大于20k并且小于100k的所有txt文件) which 指令 - 精确查找当前可执行的指令 whereis 指令 - 查找所有匹配的命令 四、网络管理 ifconfig 查看网卡状态 netstat -natp - 查看网络连接状态 netstat -natp|grep 端口号 - 查看指定端口的网络连接状态 ping 地址 ping -i 时间 地址 ping -c 次数 地址 telnet ip地址 端口 - 查看远程主机网络连接状况 dig 地址 - 查看DNS ** wget 地址 - 下载 五、使用包管理工具 包管理工具：yum yum search：搜索软件包，例如yum search nginx。 yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。 yum install：安装软件包，例如yum install nginx。 yum remove：删除软件包，例如yum remove nginx。 yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。 yum check-update：检查有哪些可以更新的软件包。 yum info：显示软件包的相关信息，例如yum info nginx。 源代码构建安装 wget 安装包的路径 -下载安装包 gunzip/tar 压缩包 - 解压、解归档 (设置安装路径) cd 安装包目录 执行: make &amp;&amp; make install -编译安装包程序 给可执行文件添加软连接到usr/bin目录下 -添加快捷方式 压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar]]></content>
      <categories>
        <category>Linux</category>
        <category>指令</category>
        <category>基础操作</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>

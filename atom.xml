<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到这里</title>
  
  <subtitle>—— 茂茂</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="LittleMaoer.github.io/"/>
  <updated>2019-02-25T12:26:44.912Z</updated>
  <id>LittleMaoer.github.io/</id>
  
  <author>
    <name>高盛茂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx服务器的安装配置</title>
    <link href="LittleMaoer.github.io/2019/02/25/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/"/>
    <id>LittleMaoer.github.io/2019/02/25/Nginx服务器安装/</id>
    <published>2019-02-25T12:26:51.355Z</published>
    <updated>2019-02-25T12:26:44.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h1><h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><code>![打开安全组设置](./img/aliyun0.png)</code>  </p><p><code>![](./img/aliyun2.png)</code></p><p><code>![](./img/aliyun3.png)</code></p><p><code>![](./img/aliyun4.png)</code></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>b) 安装nginx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line">```  </span><br><span class="line">c) 运行nginx  </span><br><span class="line">Nginx不会自行启动。要运行Nginx</span><br></pre></td></tr></table></figure><pre><code>systemctl start nginx</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nginx的运行命令:</span><br></pre></td></tr></table></figure><pre><code>systemctl status nginx 查看nginx的状态  systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d) 系统启动时启动Nginx</span><br></pre></td></tr></table></figure><pre><code>systemctl enable nginx</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：</span><br></pre></td></tr></table></figure><pre><code>sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.nginx目录共享配置  </span><br><span class="line">a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting  </span><br><span class="line"></span><br><span class="line">b) 打开 etc/nginx/nginx.conf 文件，设置server</span><br></pre></td></tr></table></figure><pre><code>#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表root /home/yuting;location / {       autoindex on;       autoindex_exact_size on;       autoindex_localtime on;}  </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">除了可以共享文件，还可以自定义页面</span><br></pre></td></tr></table></figure><pre><code>#自定义服务器页面location / {        root /home/yuting;        index index.html index.htm;}</code></pre><p><code>`</code></p><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code></p><p>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx服务器&quot;&gt;&lt;a href=&quot;#Nginx服务器&quot; class=&quot;headerlink&quot; title=&quot;Nginx服务器&quot;&gt;&lt;/a&gt;Nginx服务器&lt;/h1&gt;&lt;h3 id=&quot;1-阿里云添加80端口&quot;&gt;&lt;a href=&quot;#1-阿里云添加80端口&quot; class
      
    
    </summary>
    
      <category term="Nginx服务器" scheme="LittleMaoer.github.io/categories/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="安装配置" scheme="LittleMaoer.github.io/categories/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    
      <category term="常用操作" scheme="LittleMaoer.github.io/categories/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Nginx" scheme="LittleMaoer.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="LittleMaoer.github.io/2019/02/25/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>LittleMaoer.github.io/2019/02/25/Hexo博客搭建/</id>
    <published>2019-02-25T12:23:28.909Z</published>
    <updated>2019-02-25T12:23:23.983Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo博客搭建   </p><p>###1. 搭建博客<br>使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   </p><ol><li>首先在自己的电脑上创建一个空的文件夹’Hexo’  </li><li>在gitbash中终端中通过<code>cd</code>指令进入到刚才创建的文件夹中   </li><li>输入指令 <code>npm install -g hexo</code> 安装Hexo  </li><li>输入指令 <code>hexo init</code> 进行初始化  </li><li>依次输入指令<code>npm install</code> <code>hexo server</code> 启动服务器<br> 博客内容发生改变后可以通过<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> <code>hexo server</code>刷新后重新启动    </li></ol><p>###2. 部署博客  </p><ol><li>在github上创建一个空的仓库，仓库名： <code>用户名.github.io</code>  </li><li><p>修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容<br><img src="/Users/yuting/Desktop/Hexo/image1.png" alt>  </p></li><li><p>使用git部署, 输入指令<code>npm install hexo-deployer-git --save</code>  </p></li><li>输入指令<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> 对博客进行提交</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo博客搭建   &lt;/p&gt;
&lt;p&gt;###1. 搭建博客&lt;br&gt;使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先在自己的电脑上创建一个空的文件夹’Hexo’  &lt;/li&gt;
&lt;li&gt;在gitbash中终端中通过&lt;
      
    
    </summary>
    
      <category term="hexo博客" scheme="LittleMaoer.github.io/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="搭建博客" scheme="LittleMaoer.github.io/categories/hexo%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="基础操作" scheme="LittleMaoer.github.io/categories/hexo%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="gitbash" scheme="LittleMaoer.github.io/tags/gitbash/"/>
    
      <category term="hexo" scheme="LittleMaoer.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git的常用指令</title>
    <link href="LittleMaoer.github.io/2019/02/25/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>LittleMaoer.github.io/2019/02/25/git常用指令/</id>
    <published>2019-02-25T12:21:09.802Z</published>
    <updated>2019-02-25T12:20:51.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><h2 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1.基本指令"></a>1.基本指令</h2><p><code>git init</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  新建git仓库<br><code>git add 文件/文件夹</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  将文件添加到缓存区中<br><code>git add -A</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中<br><code>git stutas</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;———    查看git状态<br><code>git commit -m  ‘提交信息’</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  将缓存区中的内容全部提交到git本地仓库中<br><code>git log</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——-    查看提交日志<br><code>git reset  - - hard   HEAD</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——   让工作目录中的内容和仓库中的内容保持一致<br><code>git reset  --hard HEAD^</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到上一个版本<br><code>git  reset  - - hard 版本号</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到指定的版本<br><code>git checkout  - -  文件名</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)<br><code>git clone &lt;url&gt;</code> - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)<br><code>git remote add origin 地址</code>      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次)<br><code>git push [-u] origin master</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用)  </p><h2 id="2-分之管理"><a href="#2-分之管理" class="headerlink" title="2.分之管理"></a>2.分之管理</h2><p>创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发  </p><p>常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  </p><p><code>git branch [-a]</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        - 查看分之<br><code>git branch 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之<br><code>git checkout   分支名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-   切换分之<br><code>git checkout -b 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    - 切换并创建新的分之<br><code>git diff    分之1  分之2</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异<br><code>git merge 分之名</code>            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并     </p><p>注意: 切换分之、push、pull，这些操作前要保证工作区是clean  </p><p>怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p><h2 id="3-ssh地址的使用"><a href="#3-ssh地址的使用" class="headerlink" title="3.ssh地址的使用"></a>3.ssh地址的使用</h2><p>配置全局的用户信息(使用windows自带cmd操作)</p><p><code>git  global  config user.name  “yuting”</code>   </p><p><code>git  global  config user.email    “yuting@163.com”</code></p><p>使用git bash进行操作</p><p><code>git config --global user.name ‘yuting’</code></p><p><code>git config --global user.email  ‘yuting@163.com’</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git常用指令&quot;&gt;&lt;a href=&quot;#git常用指令&quot; class=&quot;headerlink&quot; title=&quot;git常用指令&quot;&gt;&lt;/a&gt;git常用指令&lt;/h1&gt;&lt;h2 id=&quot;1-基本指令&quot;&gt;&lt;a href=&quot;#1-基本指令&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="git操作" scheme="LittleMaoer.github.io/categories/git%E6%93%8D%E4%BD%9C/"/>
    
      <category term="指令" scheme="LittleMaoer.github.io/categories/git%E6%93%8D%E4%BD%9C/%E6%8C%87%E4%BB%A4/"/>
    
      <category term="常用操作" scheme="LittleMaoer.github.io/categories/git%E6%93%8D%E4%BD%9C/%E6%8C%87%E4%BB%A4/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="gitbase" scheme="LittleMaoer.github.io/tags/gitbase/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="LittleMaoer.github.io/2019/02/25/MySQL%E9%85%8D%E7%BD%AE/"/>
    <id>LittleMaoer.github.io/2019/02/25/MySQL配置/</id>
    <published>2019-02-25T12:08:58.601Z</published>
    <updated>2019-02-25T12:08:53.463Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL配置  </p><ol><li><p>下载MySQL源安装包: <code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code>  </p></li><li><p>安装MySQL源: <code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p></li><li><p>安装MySQL:  <code>mysql:yum install mysql-community-server</code>  </p></li><li><p>设置开启启动MySQL服务: <code>systemctl enable mysqld</code>  </p></li><li><p>启动/重启MySQL服务：systemctl restart mysqld  </p></li><li><p>查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log  </p></li><li>更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’<br>这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法：</li></ol><p>方法一：把密码设置复杂点（这是最直接的方法）</p><p>方法二：关闭mysql密码强度验证(validate_password)</p><p>编辑配置文件：<code>vim /etc/my.cnf</code>， 增加这么一行<code>validate_password=off</code></p><p>编辑后重启mysql服务：<code>systemctl restart mysqld</code>  　　　　　　　　  </p><ol start="8"><li>设置mysql能够远程访问:  </li></ol><p>a. 登录进MySQL:  <code>mysql -uroot -p密码</code>  </p><p>b. 增加一个用户给予访问权限: <code>grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option;</code>  </p><p>c. 刷新权限：<code>flush privileges;­</code>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL配置  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载MySQL源安装包: &lt;code&gt;wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux指令</title>
    <link href="LittleMaoer.github.io/2019/02/25/Linux%E6%8C%87%E4%BB%A4/"/>
    <id>LittleMaoer.github.io/2019/02/25/Linux指令/</id>
    <published>2019-02-25T12:07:00.728Z</published>
    <updated>2019-02-25T12:06:13.289Z</updated>
    
    <content type="html"><![CDATA[<p>连接云服务器：</p><p>1.连接服务器:    ssh  root@ip地址</p><p>2.退出:  logout</p><p>Linux指令系统：</p><p>命令名称 [命名参数] [命令对象]</p><p>一、日常操作</p><p>1.cd指令       - 进入指定文件夹</p><p>cd  目录     - 进入指定目录(也可以是文件夹对应的路径)<br>               ~相对路径 — 绝对路径</p><p>cd  ..       - 返回上层目录</p><p>cd  ~    - 回到根目录</p><p>cd  /    - 进入系统根目录</p><p>2.ls指令</p><p>ls          - 查看当前目录中的内容</p><p>ls  -l/-lh              -  查看详情</p><p>ls -a               - 隐藏文件也一起显示</p><p>ls -R            - 递归显示所有内容</p><p>ls -S/-t            - 按大小/时间排序</p><p>3.pwd指令         </p><p>pwd  - 显示当前完整目录</p><p>4.文件操作指令</p><p>touch  文件名        - 新建文件</p><p>cat 文件名           - 查看文件内容</p><p>vim/vi  文件名          -打开文件</p><p>rm    文件名        - 删除文件</p><p>rm - r 目录        - 删除文件夹</p><p>cp  文件名1  文件名2    - 将文件1中的内容拷贝到文件2中</p><p>cp  文件1路径   文件2路径</p><p>cp -r  文件名/目录名   目录2    - 将文件/目录拷贝到目录2中</p><p>mv    文件名1  文件名2    - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名）</p><p>mv  文件1路径   文件2路径</p><p>mv    文件名1  文件目录    - 将文件1移动到指定目录中<br>注意: mv指令不能加-r来操作目录</p><p>(注意：cp/mv/rm 后面可以跟： -i询问  -f强制  -n不覆盖)</p><p>mkdir  目录名        - 新建文件夹</p><p>mkdir -p a/b/c        - 按层级创建a,b,c三个文件夹</p><p>mkdir -p a/{b,c}/{d,e,f}    -同一层级常见多个</p><p>rmdir  目录名        - 删除指定空目录</p><p>7.history        - 显示历史指令记录</p><p>bashrc 配置显示时间：export  HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “ </p><p>修改bashrc 后使其生效:  source ~/.bashrc  或 .  .bashrc   </p><p>6.链接</p><p>ln -s 源路径  目标路径        - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！)</p><p>ln 源路径  目标路径            - 给源路径对应的文件在目标路径下创建一个硬链接（了解）</p><p>注意: 源文件不存在的时候，软件无效，硬链接变成普通文件</p><p>8.快捷键</p><p>ctr + f         - 前进一个字符</p><p>ctr + b        - 后退一个字符</p><p>ctr + a        - 回到行首</p><p>ctr + e         - 回到行尾</p><p>ctr + w        - 向左删除一个单词</p><p>ctr + u        - 向左删除全部</p><p>ctr + k        - 向右删除全部</p><p>ctr + y        - 粘贴上次删除的内容</p><p>ctr + l        - 清屏  </p><p>二、进程相关指令(用得较少)</p><p>1.ps指令</p><p>ps                        - 进程状态</p><p>ps -aux  或者  ps ex            - 查看进程</p><p>ps -aux|grep 进程名        - 查看指定进程</p><p>ps grep  进程ID</p><p>2.top指令</p><p>top                         - 动态监控进程</p><p>top  -p PID1,PID2,….        - 动态监控指定进程</p><p>3.free指令</p><p>free -单位                    - 以指定单位查看内存, 例如<br>free -m (以Mb为单位显示内存状况), -g,  -k等！</p><p>4.kill指令</p><p>kill 进程号                    - 杀死指定的进程</p><p>kill -1/-9/-15                - -1(HUP)不间断重启，-9<br>(KILL)强制杀死进程,-15(TERM)正常终止进程  </p><p>pkill  进程名                - 按名字处理进程</p><p>killall 进程名                - 处理名字匹配的进程</p><p>uptime                    - 查看系统状态</p><p>三、权限管理</p><p>1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多)</p><p>users                                     - 查看当前用户</p><p>groups                                 - 查看当前分组</p><p>groupadd  分组名                            - 添加分组</p><p>useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名        - 创建一个用户添加到指定的分组中(在home创建相应的文件夹)</p><p>usermod -G 分组列表 用户名                    - 修改分组</p><p>passwd 用户名                            - 修改密码</p><p>su  用户名                                - 切换用户身份</p><p>sudo                                        - 以管理员执行其他程序</p><p>注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序</p><p>b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容</p><p>Allow root to run any commands anywhere</p><p>root    ALL=(ALL)       ALL</p><p>xiaoming ALL=(ALL)      ALL        (自己添加的，xiaoming是用户名)</p><p>2.chmod </p><p>chmod       权限值   文件            - 修改指定文件的权限</p><p>chmod    [a,u,g,o][+,-][r,w,x]  文件            - 为指定文件，给所有用户添加相应的权限(a:所有，u:自己，g:同组，o:其他；<br>+：添加， -: 取消；r:读，w:写，x:执行)</p><p>chown  用户名     文件            - 改变文件所有者</p><p>(权限制是三组二进制值)</p><p>self      group    other</p><p>rwx      rwx        rwx</p><p>111       101        001            - 自己读写可执行，同一分组的只读可执行，其他的只可执行</p><p>110      100        000</p><p>chmod  644  文件</p><p>chmod  777   文件</p><p>chmod 666    文件</p><p>三、日志管理</p><p>1.cat指令</p><p>cat       文件                - 查看文件内容</p><p>2.查看部分</p><p>head -n  N  文件        - 查看前N行内容</p><p>tail  -n  N    文件         - 查看后N行内容</p><p>3.</p><p>less [-N]  文件</p><ul><li><p>按 j 向下</p></li><li><p>按 k 向上</p></li><li><p>按 f 向下翻屏</p></li><li><p>按    b 向上翻屏</p></li><li><p>按 g 到全文开头</p></li><li><p>按 G 到全文结尾</p></li><li><p>按 Q 退出  </p></li></ul><p>more [-N]  文件            - 和less差不多，这个是尽可能多，less是尽可能少的加载</p><p>4.处理</p><p>sort                  - 排序  (cat 文件 |sort)</p><p>uniq                - 去重  (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用:  |sort|uniq</p><p>awk ‘{print $N}’    - 打印第N列的内容(netstat -natp|awk ‘{print $4}’)</p><p>history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3           -获取历史指令中，使用最频繁的三个指令</p><p>5.重定向</p><p>执行获取数据的指令  &gt; 文件  （将执行指定的结果存储到文件中 - 覆盖原文件中内容）</p><p>执行获取数据的指令 &gt;&gt; 文件   (将执行指定的结果存储到文件中 - 在原文件的最后追加)</p><p>5.统计  </p><p>wc -c(字符)/-w(单词)/-l(行)  文件</p><p>6.查找</p><p>grep  查看对象    目录/文件  参数</p><pre><code>参数：    -i    忽略大小写:         grep you bb.txt   -i    -n   显示行标号：      grep you bb.txt -n   /   grep you bb.txt -i -n    -E   通过正则表达式匹配:     grep -E  ‘正则表达式’  文件    注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B                                       支持：.   +, *, ?, {N,M}, [], ^, $    -v   忽略字段:   grep you bb.txt -v  (在bb.txt中找不包含you的所有行)                    grep -E &apos;[0-9]+\.[0-9]+&apos; abb.txt -v    -rn  递归查找目录，并打印行号    grep -r  you ./   (在当前文件夹下中所有文件中去找包行’you’的行)    —include=‘*.py’    仅包含 py文件: grep -r you ./ --include=&apos;*.txt&apos;    —exclude=‘*.js’    不包含 js 文件: grep -r you ./ --exclude=&apos;*.c&apos;例如：    grep you bb.txt      grep you bb.txt -i    grep you bb.txt -i -n    grep -E &apos;[0-9]+&apos; bb.txt </code></pre><p>find       DIR    -name  ‘<em>.xxx’        找到目录下所有名字匹配的文件:  find a1 -name ‘</em>.txt’(在文件夹a1中找所有txt文件)</p><pre><code>例：find ./ -size +20k -size -100k -name &apos;*.txt&apos;   (找当前目录下大于20k并且小于100k的所有txt文件)</code></pre><p>which  指令        - 精确查找当前可执行的指令</p><p>whereis  指令    - 查找所有匹配的命令</p><p>四、网络管理</p><p>ifconfig     查看网卡状态</p><p>netstat   -natp                    - 查看网络连接状态</p><p>netstat   -natp|grep  端口号            - 查看指定端口的网络连接状态    </p><p>ping  地址 </p><p>ping  -i   时间    地址</p><p>ping  -c  次数    地址</p><p>telnet  ip地址    端口         - 查看远程主机网络连接状况</p><p>dig 地址            - 查看DNS</p><p>** wget  地址            - 下载  </p><p>五、使用包管理工具</p><p>包管理工具：yum </p><ul><li><p>yum search：搜索软件包，例如yum search nginx。</p></li><li><p>yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。</p></li><li><p>yum install：安装软件包，例如yum install nginx。</p></li><li><p>yum remove：删除软件包，例如yum remove nginx。</p></li><li><p>yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。</p></li><li><p>yum check-update：检查有哪些可以更新的软件包。</p></li><li><p>yum info：显示软件包的相关信息，例如yum info nginx。</p></li></ul><p>源代码构建安装</p><ol><li><p>wget  安装包的路径        -下载安装包</p></li><li><p>gunzip/tar  压缩包         - 解压、解归档</p></li><li><p>(设置安装路径)</p></li><li><p>cd 安装包目录 执行: make &amp;&amp; make install       -编译安装包程序</p></li><li><p>给可执行文件添加软连接到usr/bin目录下            -添加快捷方式</p></li></ol><p>压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;连接云服务器：&lt;/p&gt;
&lt;p&gt;1.连接服务器:    ssh  root@ip地址&lt;/p&gt;
&lt;p&gt;2.退出:  logout&lt;/p&gt;
&lt;p&gt;Linux指令系统：&lt;/p&gt;
&lt;p&gt;命令名称 [命名参数] [命令对象]&lt;/p&gt;
&lt;p&gt;一、日常操作&lt;/p&gt;
&lt;p&gt;1.cd指令   
      
    
    </summary>
    
      <category term="Linux" scheme="LittleMaoer.github.io/categories/Linux/"/>
    
      <category term="指令" scheme="LittleMaoer.github.io/categories/Linux/%E6%8C%87%E4%BB%A4/"/>
    
      <category term="基础操作" scheme="LittleMaoer.github.io/categories/Linux/%E6%8C%87%E4%BB%A4/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Linux" scheme="LittleMaoer.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="LittleMaoer.github.io/2019/02/24/hello-world/"/>
    <id>LittleMaoer.github.io/2019/02/24/hello-world/</id>
    <published>2019-02-24T10:15:11.439Z</published>
    <updated>2019-02-24T10:15:11.439Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
